# 30 neuronios de entrada -> 
#16 neuronios na camada oculta -> 
#16 neuronios na camada oculta -> 
#1 neuronio de saida
#(entrada + saida)/ 2 = (30 + 1) / 2 = 16
classificador = nn.Sequential( #Sequencial
    nn.Linear(in_features=30, out_features=16), #30 neuroniosd e entrada e 16 da oculta
    nn.ReLU(), #função relu
    nn.Linear(16, 16), 
    nn.ReLU(),
    nn.Linear(16, 1),
    nn.Sigmoid()
)
criterion = nn.BCELoss() #criteiro do erro
 
optimizer = torch.optim.Adam(classificador.parameters(), lr=0.001, weight_decay=0.0001)

